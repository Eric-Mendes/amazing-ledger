// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ledgerv1beta

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LedgerAPIClient is the client API for LedgerAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LedgerAPIClient interface {
	CreateTransaction(ctx context.Context, in *CreateTransactionRequest, opts ...grpc.CallOption) (*CreateTransactionResponse, error)
	GetAccountBalance(ctx context.Context, in *GetAccountBalanceRequest, opts ...grpc.CallOption) (*GetAccountBalanceResponse, error)
	ListAccountEntries(ctx context.Context, in *ListAccountEntriesRequest, opts ...grpc.CallOption) (*ListAccountEntriesResponse, error)
	GetSyntheticReport(ctx context.Context, in *GetSyntheticReportRequest, opts ...grpc.CallOption) (*GetSyntheticReportResponse, error)
}

type ledgerAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewLedgerAPIClient(cc grpc.ClientConnInterface) LedgerAPIClient {
	return &ledgerAPIClient{cc}
}

func (c *ledgerAPIClient) CreateTransaction(ctx context.Context, in *CreateTransactionRequest, opts ...grpc.CallOption) (*CreateTransactionResponse, error) {
	out := new(CreateTransactionResponse)
	err := c.cc.Invoke(ctx, "/ledger.v1beta.LedgerAPI/CreateTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerAPIClient) GetAccountBalance(ctx context.Context, in *GetAccountBalanceRequest, opts ...grpc.CallOption) (*GetAccountBalanceResponse, error) {
	out := new(GetAccountBalanceResponse)
	err := c.cc.Invoke(ctx, "/ledger.v1beta.LedgerAPI/GetAccountBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerAPIClient) ListAccountEntries(ctx context.Context, in *ListAccountEntriesRequest, opts ...grpc.CallOption) (*ListAccountEntriesResponse, error) {
	out := new(ListAccountEntriesResponse)
	err := c.cc.Invoke(ctx, "/ledger.v1beta.LedgerAPI/ListAccountEntries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerAPIClient) GetSyntheticReport(ctx context.Context, in *GetSyntheticReportRequest, opts ...grpc.CallOption) (*GetSyntheticReportResponse, error) {
	out := new(GetSyntheticReportResponse)
	err := c.cc.Invoke(ctx, "/ledger.v1beta.LedgerAPI/GetSyntheticReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LedgerAPIServer is the server API for LedgerAPI service.
// All implementations should embed UnimplementedLedgerAPIServer
// for forward compatibility
type LedgerAPIServer interface {
	CreateTransaction(context.Context, *CreateTransactionRequest) (*CreateTransactionResponse, error)
	GetAccountBalance(context.Context, *GetAccountBalanceRequest) (*GetAccountBalanceResponse, error)
	ListAccountEntries(context.Context, *ListAccountEntriesRequest) (*ListAccountEntriesResponse, error)
	GetSyntheticReport(context.Context, *GetSyntheticReportRequest) (*GetSyntheticReportResponse, error)
}

// UnimplementedLedgerAPIServer should be embedded to have forward compatible implementations.
type UnimplementedLedgerAPIServer struct {
}

func (UnimplementedLedgerAPIServer) CreateTransaction(context.Context, *CreateTransactionRequest) (*CreateTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransaction not implemented")
}
func (UnimplementedLedgerAPIServer) GetAccountBalance(context.Context, *GetAccountBalanceRequest) (*GetAccountBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountBalance not implemented")
}
func (UnimplementedLedgerAPIServer) ListAccountEntries(context.Context, *ListAccountEntriesRequest) (*ListAccountEntriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccountEntries not implemented")
}
func (UnimplementedLedgerAPIServer) GetSyntheticReport(context.Context, *GetSyntheticReportRequest) (*GetSyntheticReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSyntheticReport not implemented")
}

// UnsafeLedgerAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LedgerAPIServer will
// result in compilation errors.
type UnsafeLedgerAPIServer interface {
	mustEmbedUnimplementedLedgerAPIServer()
}

func RegisterLedgerAPIServer(s grpc.ServiceRegistrar, srv LedgerAPIServer) {
	s.RegisterService(&LedgerAPI_ServiceDesc, srv)
}

func _LedgerAPI_CreateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerAPIServer).CreateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ledger.v1beta.LedgerAPI/CreateTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerAPIServer).CreateTransaction(ctx, req.(*CreateTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerAPI_GetAccountBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerAPIServer).GetAccountBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ledger.v1beta.LedgerAPI/GetAccountBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerAPIServer).GetAccountBalance(ctx, req.(*GetAccountBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerAPI_ListAccountEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAccountEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerAPIServer).ListAccountEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ledger.v1beta.LedgerAPI/ListAccountEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerAPIServer).ListAccountEntries(ctx, req.(*ListAccountEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerAPI_GetSyntheticReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSyntheticReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerAPIServer).GetSyntheticReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ledger.v1beta.LedgerAPI/GetSyntheticReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerAPIServer).GetSyntheticReport(ctx, req.(*GetSyntheticReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LedgerAPI_ServiceDesc is the grpc.ServiceDesc for LedgerAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LedgerAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ledger.v1beta.LedgerAPI",
	HandlerType: (*LedgerAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTransaction",
			Handler:    _LedgerAPI_CreateTransaction_Handler,
		},
		{
			MethodName: "GetAccountBalance",
			Handler:    _LedgerAPI_GetAccountBalance_Handler,
		},
		{
			MethodName: "ListAccountEntries",
			Handler:    _LedgerAPI_ListAccountEntries_Handler,
		},
		{
			MethodName: "GetSyntheticReport",
			Handler:    _LedgerAPI_GetSyntheticReport_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ledger/v1beta/ledger.proto",
}

// HealthAPIClient is the client API for HealthAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HealthAPIClient interface {
	// Check - checks the system health.
	Check(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*CheckResponse, error)
}

type healthAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewHealthAPIClient(cc grpc.ClientConnInterface) HealthAPIClient {
	return &healthAPIClient{cc}
}

func (c *healthAPIClient) Check(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*CheckResponse, error) {
	out := new(CheckResponse)
	err := c.cc.Invoke(ctx, "/ledger.v1beta.HealthAPI/Check", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HealthAPIServer is the server API for HealthAPI service.
// All implementations should embed UnimplementedHealthAPIServer
// for forward compatibility
type HealthAPIServer interface {
	// Check - checks the system health.
	Check(context.Context, *CheckRequest) (*CheckResponse, error)
}

// UnimplementedHealthAPIServer should be embedded to have forward compatible implementations.
type UnimplementedHealthAPIServer struct {
}

func (UnimplementedHealthAPIServer) Check(context.Context, *CheckRequest) (*CheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check not implemented")
}

// UnsafeHealthAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HealthAPIServer will
// result in compilation errors.
type UnsafeHealthAPIServer interface {
	mustEmbedUnimplementedHealthAPIServer()
}

func RegisterHealthAPIServer(s grpc.ServiceRegistrar, srv HealthAPIServer) {
	s.RegisterService(&HealthAPI_ServiceDesc, srv)
}

func _HealthAPI_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthAPIServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ledger.v1beta.HealthAPI/Check",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthAPIServer).Check(ctx, req.(*CheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HealthAPI_ServiceDesc is the grpc.ServiceDesc for HealthAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HealthAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ledger.v1beta.HealthAPI",
	HandlerType: (*HealthAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Check",
			Handler:    _HealthAPI_Check_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ledger/v1beta/ledger.proto",
}
