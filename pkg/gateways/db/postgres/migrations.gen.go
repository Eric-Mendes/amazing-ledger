// Code generated by go-bindata. DO NOT EDIT.
// sources:
// migrations/000001_create_accounts_table.down.sql (55B)
// migrations/000001_create_accounts_table.up.sql (455B)

package postgres

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __000001_create_accounts_tableDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x48\x4c\x4e\xce\x2f\xcd\x2b\x29\xb6\xe6\x82\x48\x47\x06\xb8\xc2\xc4\xe2\x4b\x2a\x0b\x52\xad\xb9\x00\x01\x00\x00\xff\xff\x55\x3c\xd0\xc9\x37\x00\x00\x00")

func _000001_create_accounts_tableDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_create_accounts_tableDownSql,
		"000001_create_accounts_table.down.sql",
	)
}

func _000001_create_accounts_tableDownSql() (*asset, error) {
	bytes, err := _000001_create_accounts_tableDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_create_accounts_table.down.sql", size: 55, mode: os.FileMode(0644), modTime: time.Unix(1596571256, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x4f, 0x27, 0x2d, 0x65, 0x0, 0x52, 0xf9, 0x55, 0xab, 0xf, 0x31, 0x13, 0xa3, 0xbd, 0x11, 0x88, 0x3f, 0x23, 0xc3, 0x49, 0xdb, 0xc9, 0xc9, 0xd1, 0x60, 0x99, 0xfc, 0xc8, 0xa8, 0xba, 0x86, 0xdb}}
	return a, nil
}

var __000001_create_accounts_tableUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x91\x41\x6b\xfa\x40\x10\xc5\xef\xf9\x14\x0f\x2f\x2a\x78\xf8\xdf\xff\x50\xd8\xc6\x11\x17\x93\x55\x92\x5d\x5a\x7b\x59\xc6\x64\x0f\x0b\x1a\xc5\x8c\x6d\xfd\xf6\x25\x81\x48\x25\xd0\xdb\xce\x9b\xf7\x7e\xbc\x65\xd2\x82\x94\x25\xd8\xfd\x8e\xc0\x55\x75\xbe\x35\xe2\xe5\x7e\x09\x50\x25\xc8\xb8\x1c\xb3\x04\x98\x72\xdb\x06\x99\x2e\xba\xe7\x31\xf2\x21\x1e\xa3\xdc\xa7\xc9\xfc\x7f\x92\x0c\x79\xf5\x9a\x11\xf4\x0a\x66\x6b\x41\xef\xba\xb4\xe5\x80\x6b\x7b\x44\xac\xe1\x9c\x5e\x62\x57\xe8\x5c\x15\x7b\x6c\x68\xdf\x7b\x8d\xcb\xb2\x8e\x7b\xfe\x6a\xc2\x15\x12\xbe\xe5\x49\x6e\xf8\x14\xc6\x6a\x6f\xf6\xb1\x1e\x6f\x26\x5d\xf7\xc9\xf3\x4f\x7e\xef\x4f\x41\xb8\x66\x61\xf8\x51\xf4\xc0\x47\x6e\xaa\x80\xd8\x3c\xeb\xd5\x35\xb0\x84\xda\xb3\xc0\xea\x9c\x4a\xab\xf2\x1d\xde\xb4\x5d\xf7\x23\x3e\xb6\x86\x1e\x7e\x2c\x69\xa5\x5c\x66\x91\xba\xa2\x20\x63\xfd\x23\xd1\x91\x6e\x97\x9a\x25\xb4\x7f\x91\x16\x49\x02\xa4\x5b\x53\xda\x42\x69\x63\x71\x39\xb7\x51\xe2\x67\xf0\x43\xbb\x74\x4d\xe9\x06\xb3\x61\x7c\xc1\xbf\x79\x77\x87\x9f\x00\x00\x00\xff\xff\xa9\x9a\x71\xef\xc7\x01\x00\x00")

func _000001_create_accounts_tableUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_create_accounts_tableUpSql,
		"000001_create_accounts_table.up.sql",
	)
}

func _000001_create_accounts_tableUpSql() (*asset, error) {
	bytes, err := _000001_create_accounts_tableUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_create_accounts_table.up.sql", size: 455, mode: os.FileMode(0644), modTime: time.Unix(1596571206, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1a, 0xd6, 0x33, 0x63, 0x83, 0x2d, 0xc5, 0x20, 0x29, 0x76, 0x5e, 0xe5, 0x51, 0x7, 0xd4, 0x1a, 0x2a, 0x33, 0x6f, 0x9b, 0x91, 0xe6, 0x57, 0x9e, 0xf2, 0x0, 0x7c, 0x9c, 0xe1, 0x25, 0x57, 0xe6}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"000001_create_accounts_table.down.sql": _000001_create_accounts_tableDownSql,
	"000001_create_accounts_table.up.sql":   _000001_create_accounts_tableUpSql,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"000001_create_accounts_table.down.sql": &bintree{_000001_create_accounts_tableDownSql, map[string]*bintree{}},
	"000001_create_accounts_table.up.sql":   &bintree{_000001_create_accounts_tableUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
